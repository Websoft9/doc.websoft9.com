# ProxyCheck: Read dockerhub proxy URL from docs/reference/_include/dockerhub-proxy.md and test the network speed
# Spellcheck

name: Check Action

on: 
  workflow_dispatch:
  push:
    branches:
      - dev
      
jobs:
  ProxyCheck:
    name: ProxyCheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Read and process dockerhub-proxy.md
      id: read_file
      run: |
        # Read the file and process each line
        urls=()
        while IFS= read -r line; do
          # Remove '- https://' prefix and any trailing whitespace, and append to urls array
          url=$(echo "${line/- https:\/\//}" | tr -d '\r')
          urls+=("$url")
        done < docs/reference/_include/dockerhub-proxy.md

        # Print the array for debugging
        echo "Processed URLs: ${urls[@]}"

        # Convert the array to a JSON array string
        urls_json=$(printf '%s\n' "${urls[@]}" | jq -R . | jq -s .)

        # Save the JSON array to the outputs
        echo "::set-output name=urls::$urls_json"

    - name: Docker pull from proxies
      run: |
        # Read the URLs from the previous step
        urls_json="${{ steps.read_file.outputs.urls }}"
        url_array=($(echo $urls_json | jq -r '.[]'))

        # Define the size of the image in MB
        image_size_mb=501

        # Try to pull the image from each URL
        for url in "${url_array[@]}"; do
          echo "Trying to pull from $url/library/mysql:5.7"
          
          # Get the start time
          start_time=$(date +%s)
          
          # Attempt to pull the image
          if docker pull "$url/library/mysql:5.7"; then
            # Get the end time
            end_time=$(date +%s)
            
            # Calculate the duration in seconds
            duration=$((end_time - start_time))
            
            # Calculate the pull rate in MB/s
            if [ $duration -gt 0 ]; then
              pull_rate=$(echo "scale=2; $image_size_mb / $duration" | bc)
            else
              pull_rate=0
            fi

            # Check if the pull rate is less than 1 MB/s
            if (( $(echo "$pull_rate < 1" | bc -l) )); then
              echo "Pull rate is less than 1 MB/s, marking as failure"
              exit 1
            else
              echo "Successfully pulled from $url"
            fi

            # Delete the pulled image to ensure fresh pull for the next URL
            docker rmi "$url/library/mysql:5.7"
          else
            echo "--------------Failed to pull from $url--------------"
            pull_rate=0
          fi

          # Always check if the pull rate is less than 1 MB/s
          if (( $(echo "$pull_rate < 1" | bc -l) )); then
            echo "Pull rate is less than 1 MB/s, marking as failure"
            exit 1
          fi

          echo "--------------Final pull rate($url): $pull_rate MB/s-------------"
        done



  # Spellcheck:
  #   name: Spellcheck
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: rojopolis/spellcheck-github-actions@0.41.0
  #     name: Spellcheck
  #     with:
  #       source_files: i18n/en/docusaurus-plugin-content-docs/current/**/*.md
  #       task_name: Markdown
  #       output_file: spellcheck-output.txt

  #   - uses: actions/upload-artifact@v3
  #     if: '!cancelled()' # Do not upload artifact if job was cancelled
  #     with:
  #       name: Spellcheck Output
  #       path: spellcheck-output.txt
